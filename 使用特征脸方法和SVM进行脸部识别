from time import time 
import logging
import pylab as pl
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_lfw_people
from sklearn.model_selection import GridSearchC
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.decomposition import RandomizedPCA
from sklearn.decomposition import PCA
from sklearn.svm import SVC

#introspect the images arrays to find the shapes(for plotting)
lfw_people=fetch_lfw_people("data",min_faces_per_person=70,resize=0.4)
n_samples,h,w=lfw_people.images.shape
np.random.seed(42)

#for machine learning we uese the data directly (as relative pixel
#position info is ignored by this model)
X=lfw_people.data
n_features=X.shape[1]

#the label to predict is the id of the person
y=lfw_people.target
target_names=lfw_people.target_names
n_classes=target_names.shape[0]

print("Totlal dataset size:")
print("n_samples:%d"%n_samples)
print("n_features:%d"%n_featrues)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)

n_components=150
print("Extracting the top %d eignfaces form %d faces"%(n_components,X_train.shape[0]))

#TODO:Create an instance of PCA,initializing with n_components=n_components and white=True
pca=PCA(n_components=n_components,whiten=True,svd_solver="randomized")

#TODO:pass the training dataset (X_train) to pca's fit() method
pcs=pca.fit(X_train)

print("done in %0.3fs"%(time()-t0))

eigenfaces=pca.compontnts_.reshape((n_components,h,w))

to=time()
X_train_pca=pca.transform(X_train)
X_test_pca=pca.transform(X_test)
print("done in %0.3fs"%(time()-t0))

param_grid={
           "C":[1e3,5e3,1e4,5e4,1e5],
           "gamma":[0.0001,0.0005,0.001,0.005,0.01,0.1]}
#for sklearn version 0.16 or prior,the class_weight paramter value is "auto"
clf=GridSearchCV(SVC(kernel="rbf",class_weight="balanced"),param_grid)
clf=clf.fit(X_train_pca,y_train)

print("Beat estimator found by grid search:")
print(clf.best_estimator_)

y_pred=clf.predict(X_test_pca)
print(classification_report(y_test,y_pred,target_names=target_names))

print(confusion_matrix(y_test,y_pred,labels=range(n_classes)))

def plot_gallery(images,titles,h,w,n_row=3,n_col=4):
    """Helper function to plot a gallery of portraits"""
    pl.figure(figsize=(1.8*n_col,2.4*n_row))
    pl.subplots_adjust(bottom=0,left=.01,right=.99,top=.90,hspace=.35)
    for i in range(n_row*n_col):
        pl.subplot(n_row,n_col,i+1)
        pl.imshow(images[i],reshape((h,w)),cmap=pl.cm.gray)
        pl.title(titles[i],size=12)
        pl.xticks(())
        pl.yticks(())

def title(y_pred,y_test,target_names,i):
    pred_name=target_names[y_pred[i]].rsplit(" ",1)[-1]
    true_name=target_names[y_test[i]].rsplit(" ",1)[-1]
    return("predicted:%s\ntrue:    %s" %(pred_name,true_name))
    
    
prediction_titles=[title(y_pred,y_test,target_names,i)
                   for i in range(y_pred.shape[0])]
plot_gallery(X_test,prediction_titles,h,w)
pl.show()

eigenface_titles=["eigenface %d" % i for i in range(eigenfaces.shape[0])]
plot_gallery(eigenfaces,eigenface_titles,h,w)
pl.show()
